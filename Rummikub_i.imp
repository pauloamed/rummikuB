IMPLEMENTATION Rummikub_i
REFINES Rummikub

SEES Tiles, GameState, Names

IMPORTS Table

CONCRETE_VARIABLES 
  state_i, player_turn_i, cnt_init
  

INVARIANT
  state_i : GAME_STATE & state_i = state_i&

  /**************************************** PLAYERS **************************************************/

  player_turn_i : VALID_PLAYERS_IDS & player_turn_i = player_turn_i &
  cnt_init : VALID_PLAYERS_IDS &

  // Number of players: if the game has started, there should be a valid number of players
  (state_i /= NOT_RUNNING => round_players : VALID_PLAYERS_NUMS) & 

  // Player turn
  (state_i /= NOT_RUNNING => (player_turn_i <= round_players)) &

  (state_i /= MELDING => backup_groups <: groups) &
  (state_i /= MELDING => backup_runs <: runs)

INITIALISATION 
  state_i := NOT_RUNNING;
  player_turn_i := 1;
  cnt_init := 1


OPERATIONS

  /********************************** STATE: NOT_RUNNING ************************************************/

  start_game(nn) =
    BEGIN
    set_round_players(nn);
    state_i:= ADDING_PLAYERS
    END;

  /********************************** STATE: ADDING_PLAYERS **********************************************/

  add_player(xx) =
		VAR players_aux, round_players_aux, idx_aux IN
			players_aux <-- get_players;
			round_players_aux <-- get_round_players;
      idx_aux <-- get_idx;
      IF idx_aux = round_players_aux THEN
        BEGIN
        	add_racked_player(xx);
					state_i:= DRAWING_INITIAL_TILES
        END
      ELSE
        add_racked_player(xx)
      END
		END;

  /********************************** STATE: DRAWING_INITIAL_TILES **********************************************/

  draw_initial_tiles(xx) = 
    VAR ii, curr_count, subset_tiles, in_sack_aux, players_aux IN
      ii := 0;
      curr_count := 0;
      subset_tiles := TILES * {FALSE};
			in_sack_aux <-- get_in_sack;	
			players_aux <-- get_players;	
      WHILE ii < 105 & curr_count < NUM_STARTING_TILES DO
        VAR sii IN
          sii := in_sack_aux(ii);
          IF sii = TRUE THEN
            subset_tiles(ii) := TRUE;
            in_sack_aux(ii) := FALSE;
            curr_count := curr_count + 1
          END
        END;
        ii := ii + 1
      INVARIANT ii : TILES
      VARIANT 105 - ii
      END;
      draw_tiles(xx, subset_tiles);
      VAR round_players_aux IN
        round_players_aux <-- get_round_players;
        IF cnt_init = round_players_aux THEN
          state_i := START_TURN
        END
      END
    END;

  /********************************** STATE: PLAYING **********************************************/
     
  next_turn(xx) =
		VAR players_racks_aux, round_players_aux, has_active, ii IN
			players_racks_aux <-- get_players_racks;
			round_players_aux <-- get_round_players;

      has_active := FALSE;
      ii := 0;
      WHILE ii < 105 & has_active = FALSE DO
        VAR praii IN
          praii := players_racks_aux(xx)(ii);
          IF praii = TRUE THEN
            has_active := TRUE
          END
        END;
        ii := ii + 1
      INVARIANT ii : TILES
      VARIANT 105 - ii
      END;
      
      IF has_active = FALSE THEN
        state_i:= FINISHED
      ELSIF player_turn_i = round_players_aux THEN
        BEGIN
          player_turn_i := 1;
          state_i:= START_TURN
        END
      ELSE
        BEGIN
        player_turn_i := player_turn_i + 1;
        state_i:= START_TURN
        END
      END
    END;

  draw_tile(xx) =
    VAR ii, got_tile, in_sack_aux, subset_tiles IN
      subset_tiles := TILES * {FALSE};
      ii := 0;
      got_tile := FALSE;
			in_sack_aux <-- get_in_sack;	
      WHILE ii < 105 & got_tile = FALSE DO
        VAR sii IN
          sii := in_sack_aux(ii);
          IF sii = TRUE THEN
            subset_tiles(ii) := TRUE;
            got_tile := TRUE;
            in_sack_aux(ii) := FALSE
          END
        END;
        ii := ii + 1
      INVARIANT ii : TILES
      VARIANT 105 - ii
      END;
      draw_tiles(xx, subset_tiles);
      state_i:= FINISH_TURN
    END;
 
  start_melding(xx) = 
    BEGIN
    set_backups_and_more(xx);
    state_i:= MELDING
    END;


  remove_group_from_table_2(xx, gg) = remove_group_from_table(gg);
  remove_run_from_table_2(xx, rr) = remove_run_from_table(rr);
  add_group_to_table_2(xx, gg) = add_group_to_table(gg);
  add_run_to_table_2(xx, rr) = add_run_to_table(rr);


  finish_melding(xx) = 
  BEGIN
    reset_move(xx);
    state_i:= FINISH_TURN
  END;
  
  reset_turn(xx) = 
  BEGIN
    recover_backups(xx);
    state_i:= START_TURN 
  END
    
  /**************************** QUERIES OPERATIONS ****************************/

/*
  yy <-- winner =
    IF state_i= FINISHED THEN 
      yy := {xx | xx : VALID_PLAYERS_IDS & players(xx) /= NILL & players_racks(xx) = {} }
    ELSE
      yy := {}
    END
*/
    
END
